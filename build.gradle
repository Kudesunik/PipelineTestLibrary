plugins {
	id "net.saliman.cobertura" version "2.5.4"
	id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "cobertura"

version = "1.0.0"

def nexusPassword = System.getenv("NexusPassword")

def librariesDirectoryName = "libraries"
def buildDirectoryName = "build"

repositories {
    jcenter()
    mavenLocal()
	mavenCentral()
}

dependencies {
    compile "com.carrotsearch:hppc:0.8.1"
    testCompile "junit:junit:4.12"
    testRuntime "org.slf4j:slf4j-api:1.7.10"
}

eclipse {
	classpath {
		downloadSources=true
	}
    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

sourceSets {
    main {
        java {
            srcDir "src"
            srcDir "resources"
        }
    }
    test {
        java {
            srcDir "test"
        }
    }
}

jar {
	manifest {
		attributes(
			"Manifest-Version": version,
			"Created-By": "Kudesunik"
		)
	}
}

cobertura.coverageFormats = ['html', 'xml']

task deployJar () {
	description "Deploy jar to " + buildDirectoryName + " folder"
    doLast {
    	copy {
            from configurations.runtime
            into buildDirectoryName + "/" + librariesDirectoryName
        }
    	copy {
            from "resources"
            into buildDirectoryName + "/resources"
        }
    	copy {
            from jar.archivePath
            into buildDirectoryName
            rename {project.name + ".jar"}
        }
        delete buildDirectoryName + "/classes", 
        	   buildDirectoryName + "/libs", 
        	   buildDirectoryName + "/tmp", 
        	   buildDirectoryName + "/scripts", 
        	   buildDirectoryName + "/install", 
        	   buildDirectoryName + "/distributions"
    }
}

task deployFatJar() {
	description "Deploy PipelineTestProject fat jar to " + buildDirectoryName + " folder"
	doLast {
		copy {
			from jar.archivePath
			into buildDirectoryName
			rename {project.name + ".jar"}
		}
		delete buildDirectoryName + "/classes", 
			   buildDirectoryName + "/libs", 
			   buildDirectoryName + "/tmp", 
			   buildDirectoryName + "/scripts", 
			   buildDirectoryName + "/install", 
			   buildDirectoryName + "/distributions"
	}
}

task buildFatJar(type: Jar) {
	description "Build PipelineTestProject fat jar. Basically, for internal use, use deployFatJar task"
	from {
		configurations.compile.collect{it.isDirectory() ? it : zipTree(it)}
	}
	with jar
}

uploadArchives {
	repositories {
		mavenDeployer {
        	repository(url: "https://repository.kudesunik.com/content/repositories/snapshots") {
        		authentication(userName: "deployment", password: nexusPassword)
        	}
        	pom.groupId = "ru.kudesunik.pipelinetestlibrary"
        	pom.artifactId = "pipeline-test-library"
			pom.version = version + "-SNAPSHOT"
    	}
	}
}

compileJava {
    sourceCompatibility = "1.8"
    options.incremental = true
}

deployJar.dependsOn clean
deployJar.dependsOn buildNeeded
buildNeeded.shouldRunAfter clean

buildFatJar.dependsOn clean
buildFatJar.dependsOn buildNeeded
buildNeeded.shouldRunAfter clean

deployFatJar.dependsOn buildFatJar
deployFatJar.shouldRunAfter buildFatJar